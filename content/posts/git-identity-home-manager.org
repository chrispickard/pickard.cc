#+title: multiple git identities with home-manager and fzf
#+date: 2021-04-06
#+tags[]: git, home-manager, nix


If you have multiple git identities (a personal and a work email, say) and would like to use both in
different projects on the same machine it can be a hassle. Hopefully you've never committed to your
work repo with your personal email address! If this happens you're looking at an unwieldy [[https://serverfault.com/a/13162/360506][git
filter-branch invocation]] to fix it.

To avoid the issue in the future you can use a feature of git called [[https://stackoverflow.com/a/43654115/3511790][conditional includes]], but I
still find them easy to forget to include in each repo that needs a different identity (and I don't
use a separate ~~/dev/work~ and ~~/dev/personal~ so there isn't a good place to set and forget
them). I found the solution that works best for me in [[https://www.micah.soy/posts/setting-up-git-identities/][a blog post by Micah Henning]]. You should go
check it out, but I'm quoting the first paragraph because it is almost exactly the solution I was
looking for.

#+BEGIN_QUOTE
Working on many projects across multiple identities can be difficult to manage. This is a procedure
for leveraging git aliases to set an identity at the project level for any project with support for
GPG-based commit signing.
#+END_QUOTE

Henning's needs include PGP which I won't be touching on here, but my approach will work if you do
need pgp keys as well. The other difference is that I use [[https://github.com/nix-community/home-manager][home-manager]] which allow you to
declaratively define all your dotfiles including their dependencies (copy your ~home.nix~ to a new
machine and watch as everything is setup just the way you want it, it's magical the first time you
see it work). home-manager uses [[https://nixos.org/][nix]] as a package manager. The downside (such as it is) is that nix
wants everything in the nix language so that it can track it and give you atomic upgrades and
painless rollbacks.

So, with the table-setting out of the way, how did I combine the ideas of the git config in
Henning's blog post with the git support in home-manager? It starts with a ~home.nix~ that contains
at least

~home.nix~:

#+BEGIN_SRC nix

{ config, pkgs, ... }:

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
  targets.genericLinux.enable = true;

  imports = [
    ./git
  ];
  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "20.03";
}

#+END_SRC

The important piece here is:

#+BEGIN_SRC nix
  imports = [
    ./git
  ];
#+END_SRC

where ~git~ is a directory which includes

~git/default.nix~:

#+BEGIN_SRC nix
  { config, lib, pkgs, ... }:

  {
    home.packages = with pkgs; [ fzf ];
    programs.git = {
      enable = true;
      extraConfig = {
        user.useConfigOnly = true;
        user.work.name = "Spider-Man";
        user.work.email = "friendlyspidey@neighborhood.com";
        user.personal.name = "Peter Parker";
        user.personal.email = "peter@parker.com";
      };
    };
  
    home.file."bin/git-identity" = {
      source = ./git-identity;
      executable = true;
    };

  }
#+END_SRC

and 

~git/git-identity~:
#+NAME: git-identity
#+BEGIN_SRC shell
#!/usr/bin/env bash

IDENTITIES=$(git config --global --name-only --get-regexp "user.*..name" | sed -e 's/^user.//' -e 's/.name$//')
ID=$(echo "${IDENTITIES}" | fzf -e -1 +m -q "$1")
if ! git config --global --get-regexp "user.${ID}.name" > /dev/null; then
    echo "Please use a valid git identity
Options:"
    git config --global --name-only --get-regexp "user.*..name" | sed -e 's/^user.//' -e 's/.name$//' -e 's/^/\t/'
    exit 1
fi
git config user.name "$(git config user.${ID}.name)"
git config user.email "$(git config user.${ID}.email)"

echo "Name: $(git config user.name)"
echo "Email: $(git config user.email)"
#+END_SRC

